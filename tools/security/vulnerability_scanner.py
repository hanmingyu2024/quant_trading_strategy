"""
漏洞扫描器模块

用于扫描项目中的潜在安全漏洞,包括:
- 依赖包安全检查
- 代码安全检查
- 配置文件安全检查
"""

import os
import json
import logging
from pathlib import Path
from typing import Dict, List, Optional
import pkg_resources
import yaml
import requests

class VulnerabilityScanner:
    """漏洞扫描器"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.logger = logging.getLogger(__name__)
        
        # 配置漏洞数据库API
        self.nvd_api_url = "https://services.nvd.nist.gov/rest/json/cves/1.0"
        
    def scan_dependencies(self) -> List[Dict]:
        """扫描依赖包漏洞"""
        vulnerabilities = []
        
        # 获取已安装的依赖包
        installed_packages = [
            {"name": p.key, "version": p.version}
            for p in pkg_resources.working_set
        ]
        
        # 检查每个包是否存在已知漏洞
        for pkg in installed_packages:
            try:
                response = requests.get(
                    f"{self.nvd_api_url}",
                    params={
                        "keyword": pkg["name"],
                        "resultsPerPage": 100
                    }
                )
                if response.status_code == 200:
                    data = response.json()
                    if data["result"]["CVE_Items"]:
                        vulnerabilities.append({
                            "package": pkg["name"],
                            "version": pkg["version"],
                            "vulnerabilities": data["result"]["CVE_Items"]
                        })
            except Exception as e:
                self.logger.error(f"检查包 {pkg['name']} 时出错: {str(e)}")
                
        return vulnerabilities
        
    def scan_code(self) -> List[Dict]:
        """扫描代码安全问题"""
        issues = []
        
        # 扫描Python文件
        for py_file in self.project_root.rglob("*.py"):
            with open(py_file) as f:
                content = f.read()
                
            # 检查硬编码的密钥
            if "SECRET_KEY" in content or "API_KEY" in content:
                issues.append({
                    "file": str(py_file),
                    "type": "hardcoded_secret",
                    "description": "发现硬编码的密钥"
                })
                
            # 检查不安全的导入
            if "pickle.loads" in content or "eval(" in content:
                issues.append({
                    "file": str(py_file), 
                    "type": "unsafe_code",
                    "description": "发现不安全的代码模式"
                })
                
        return issues
        
    def scan_configs(self) -> List[Dict]:
        """扫描配置文件安全问题"""
        issues = []
        
        # 扫描yaml/json配置文件
        for config_file in self.project_root.rglob("*.y*ml"):
            try:
                with open(config_file) as f:
                    config = yaml.safe_load(f)
                
                # 检查敏感配置
                self._check_sensitive_configs(config, str(config_file), issues)
                    
            except Exception as e:
                self.logger.error(f"解析配置文件 {config_file} 时出错: {str(e)}")
                
        return issues
        
    def _check_sensitive_configs(
        self, 
        config: Dict, 
        filename: str,
        issues: List[Dict],
        parent_key: str = ""
    ):
        """递归检查敏感配置项"""
        sensitive_keys = {"password", "secret", "key", "token"}
        
        for key, value in config.items():
            current_key = f"{parent_key}.{key}" if parent_key else key
            
            if isinstance(value, dict):
                self._check_sensitive_configs(value, filename, issues, current_key)
            elif any(s in key.lower() for s in sensitive_keys):
                issues.append({
                    "file": filename,
                    "type": "sensitive_config",
                    "key": current_key,
                    "description": "发现敏感配置项"
                })
                
    def run_scan(self) -> Dict:
        """运行完整扫描"""
        self.logger.info("开始安全漏洞扫描...")
        
        results = {
            "dependencies": self.scan_dependencies(),
            "code": self.scan_code(),
            "configs": self.scan_configs()
        }
        
        # 生成报告
        report_file = self.project_root / "security_scan_report.json"
        with open(report_file, "w") as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
            
        self.logger.info(f"扫描完成,报告已保存至: {report_file}")
        return results
